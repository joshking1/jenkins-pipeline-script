node {
    def mvnHome = tool name: "Maven-3.8.6", type: "maven"

    stage("Git Clone") {
        git credentialsId: 'GIT_HUB_CREDENTIALS', url: 'https://github.com/joshking1/spring-boot-mongo-docker.git'
    }
    
    stage('Maven Clean Build') {
        sh "${mvnHome}/bin/mvn clean package"
    }
    
    stage('SonarQube Analysis') {
        withSonarQubeEnv('josh') { 
            sh "${mvnHome}/bin/mvn sonar:sonar"
        }
    }

    pipeline {
    agent any
    stages {
        stage('Upload Artifact to JFrog Artifactory') {
            steps {
                script {
                    def retries = 3
                    def success = false
                    def jfrogInstance = Artifactory.server('jfrog')
                    
                    for (int i = 0; i < retries && !success; i++) {
                        try {
                            def uploadSpec = """{
                                "files": [
                                    {
                                        "pattern": "target/*.jar",
                                        "target": "libs-release-local/"
                                    }
                                ]
                            }"""
                            jfrogInstance.upload spec: uploadSpec
                            success = true
                        } catch (Exception e) {
                            echo "Upload failed: ${e.getMessage()}"
                            if (i < retries - 1) {
                                echo "Retrying upload... (${i + 1}/${retries})"
                                sleep(10)  // Optional: wait 10 seconds before retrying
                            } else {
                                error("Failed to upload artifact after ${retries} attempts")
                            }
                        }
                    }
                }
            }
        }
    }
}


    stage("Build Docker Image") {
        sh "docker build -t king-httpd ."
    }

    stage("Docker Image list") {
        sh "docker image list"
    }

    stage("Docker Image Tag") {
        sh "docker tag king-httpd josh1991/king-httpd:king-httpd"
    }
    
    stage("Docker Login to Hub Docker") {
        withCredentials([string(credentialsId: 'DOCKER_HUB_PASSWORD', variable: 'PASSWORD')]) {
            sh 'docker login -u josh1991 -p $PASSWORD'
        }
    }
     
    stage("Docker Image Push") {
        sh "docker push josh1991/king-httpd:king-httpd"
    }
}
